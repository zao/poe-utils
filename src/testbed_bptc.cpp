#include "lv_bptc.h"
#include <gli/texture2d.hpp>
#include <gli/load.hpp>

#include "cmp_core.h"

#define STB_IMAGE_IMPLEMENTATION
#include <stb_image.h>

#include <algorithm>
#include <map>
#include <memory>
#include <optional>
#include <set>
#include <string>
#include <vector>

std::map<gli::format, char const *> known_formats{
    {gli::FORMAT_UNDEFINED, "FORMAT_UNDEFINED"},
    {gli::FORMAT_RG4_UNORM_PACK8, "FORMAT_RG4_UNORM_PACK8"},
    {gli::FORMAT_RGBA4_UNORM_PACK16, "FORMAT_RGBA4_UNORM_PACK16"},
    {gli::FORMAT_BGRA4_UNORM_PACK16, "FORMAT_BGRA4_UNORM_PACK16"},
    {gli::FORMAT_R5G6B5_UNORM_PACK16, "FORMAT_R5G6B5_UNORM_PACK16"},
    {gli::FORMAT_B5G6R5_UNORM_PACK16, "FORMAT_B5G6R5_UNORM_PACK16"},
    {gli::FORMAT_RGB5A1_UNORM_PACK16, "FORMAT_RGB5A1_UNORM_PACK16"},
    {gli::FORMAT_BGR5A1_UNORM_PACK16, "FORMAT_BGR5A1_UNORM_PACK16"},
    {gli::FORMAT_A1RGB5_UNORM_PACK16, "FORMAT_A1RGB5_UNORM_PACK16"},
    {gli::FORMAT_R8_UNORM_PACK8, "FORMAT_R8_UNORM_PACK8"},
    {gli::FORMAT_R8_SNORM_PACK8, "FORMAT_R8_SNORM_PACK8"},
    {gli::FORMAT_R8_USCALED_PACK8, "FORMAT_R8_USCALED_PACK8"},
    {gli::FORMAT_R8_SSCALED_PACK8, "FORMAT_R8_SSCALED_PACK8"},
    {gli::FORMAT_R8_UINT_PACK8, "FORMAT_R8_UINT_PACK8"},
    {gli::FORMAT_R8_SINT_PACK8, "FORMAT_R8_SINT_PACK8"},
    {gli::FORMAT_R8_SRGB_PACK8, "FORMAT_R8_SRGB_PACK8"},
    {gli::FORMAT_RG8_UNORM_PACK8, "FORMAT_RG8_UNORM_PACK8"},
    {gli::FORMAT_RG8_SNORM_PACK8, "FORMAT_RG8_SNORM_PACK8"},
    {gli::FORMAT_RG8_USCALED_PACK8, "FORMAT_RG8_USCALED_PACK8"},
    {gli::FORMAT_RG8_SSCALED_PACK8, "FORMAT_RG8_SSCALED_PACK8"},
    {gli::FORMAT_RG8_UINT_PACK8, "FORMAT_RG8_UINT_PACK8"},
    {gli::FORMAT_RG8_SINT_PACK8, "FORMAT_RG8_SINT_PACK8"},
    {gli::FORMAT_RG8_SRGB_PACK8, "FORMAT_RG8_SRGB_PACK8"},
    {gli::FORMAT_RGB8_UNORM_PACK8, "FORMAT_RGB8_UNORM_PACK8"},
    {gli::FORMAT_RGB8_SNORM_PACK8, "FORMAT_RGB8_SNORM_PACK8"},
    {gli::FORMAT_RGB8_USCALED_PACK8, "FORMAT_RGB8_USCALED_PACK8"},
    {gli::FORMAT_RGB8_SSCALED_PACK8, "FORMAT_RGB8_SSCALED_PACK8"},
    {gli::FORMAT_RGB8_UINT_PACK8, "FORMAT_RGB8_UINT_PACK8"},
    {gli::FORMAT_RGB8_SINT_PACK8, "FORMAT_RGB8_SINT_PACK8"},
    {gli::FORMAT_RGB8_SRGB_PACK8, "FORMAT_RGB8_SRGB_PACK8"},
    {gli::FORMAT_BGR8_UNORM_PACK8, "FORMAT_BGR8_UNORM_PACK8"},
    {gli::FORMAT_BGR8_SNORM_PACK8, "FORMAT_BGR8_SNORM_PACK8"},
    {gli::FORMAT_BGR8_USCALED_PACK8, "FORMAT_BGR8_USCALED_PACK8"},
    {gli::FORMAT_BGR8_SSCALED_PACK8, "FORMAT_BGR8_SSCALED_PACK8"},
    {gli::FORMAT_BGR8_UINT_PACK8, "FORMAT_BGR8_UINT_PACK8"},
    {gli::FORMAT_BGR8_SINT_PACK8, "FORMAT_BGR8_SINT_PACK8"},
    {gli::FORMAT_BGR8_SRGB_PACK8, "FORMAT_BGR8_SRGB_PACK8"},
    {gli::FORMAT_RGBA8_UNORM_PACK8, "FORMAT_RGBA8_UNORM_PACK8"},
    {gli::FORMAT_RGBA8_SNORM_PACK8, "FORMAT_RGBA8_SNORM_PACK8"},
    {gli::FORMAT_RGBA8_USCALED_PACK8, "FORMAT_RGBA8_USCALED_PACK8"},
    {gli::FORMAT_RGBA8_SSCALED_PACK8, "FORMAT_RGBA8_SSCALED_PACK8"},
    {gli::FORMAT_RGBA8_UINT_PACK8, "FORMAT_RGBA8_UINT_PACK8"},
    {gli::FORMAT_RGBA8_SINT_PACK8, "FORMAT_RGBA8_SINT_PACK8"},
    {gli::FORMAT_RGBA8_SRGB_PACK8, "FORMAT_RGBA8_SRGB_PACK8"},
    {gli::FORMAT_BGRA8_UNORM_PACK8, "FORMAT_BGRA8_UNORM_PACK8"},
    {gli::FORMAT_BGRA8_SNORM_PACK8, "FORMAT_BGRA8_SNORM_PACK8"},
    {gli::FORMAT_BGRA8_USCALED_PACK8, "FORMAT_BGRA8_USCALED_PACK8"},
    {gli::FORMAT_BGRA8_SSCALED_PACK8, "FORMAT_BGRA8_SSCALED_PACK8"},
    {gli::FORMAT_BGRA8_UINT_PACK8, "FORMAT_BGRA8_UINT_PACK8"},
    {gli::FORMAT_BGRA8_SINT_PACK8, "FORMAT_BGRA8_SINT_PACK8"},
    {gli::FORMAT_BGRA8_SRGB_PACK8, "FORMAT_BGRA8_SRGB_PACK8"},
    {gli::FORMAT_RGBA8_UNORM_PACK32, "FORMAT_RGBA8_UNORM_PACK32"},
    {gli::FORMAT_RGBA8_SNORM_PACK32, "FORMAT_RGBA8_SNORM_PACK32"},
    {gli::FORMAT_RGBA8_USCALED_PACK32, "FORMAT_RGBA8_USCALED_PACK32"},
    {gli::FORMAT_RGBA8_SSCALED_PACK32, "FORMAT_RGBA8_SSCALED_PACK32"},
    {gli::FORMAT_RGBA8_UINT_PACK32, "FORMAT_RGBA8_UINT_PACK32"},
    {gli::FORMAT_RGBA8_SINT_PACK32, "FORMAT_RGBA8_SINT_PACK32"},
    {gli::FORMAT_RGBA8_SRGB_PACK32, "FORMAT_RGBA8_SRGB_PACK32"},
    {gli::FORMAT_RGB10A2_UNORM_PACK32, "FORMAT_RGB10A2_UNORM_PACK32"},
    {gli::FORMAT_RGB10A2_SNORM_PACK32, "FORMAT_RGB10A2_SNORM_PACK32"},
    {gli::FORMAT_RGB10A2_USCALED_PACK32, "FORMAT_RGB10A2_USCALED_PACK32"},
    {gli::FORMAT_RGB10A2_SSCALED_PACK32, "FORMAT_RGB10A2_SSCALED_PACK32"},
    {gli::FORMAT_RGB10A2_UINT_PACK32, "FORMAT_RGB10A2_UINT_PACK32"},
    {gli::FORMAT_RGB10A2_SINT_PACK32, "FORMAT_RGB10A2_SINT_PACK32"},
    {gli::FORMAT_BGR10A2_UNORM_PACK32, "FORMAT_BGR10A2_UNORM_PACK32"},
    {gli::FORMAT_BGR10A2_SNORM_PACK32, "FORMAT_BGR10A2_SNORM_PACK32"},
    {gli::FORMAT_BGR10A2_USCALED_PACK32, "FORMAT_BGR10A2_USCALED_PACK32"},
    {gli::FORMAT_BGR10A2_SSCALED_PACK32, "FORMAT_BGR10A2_SSCALED_PACK32"},
    {gli::FORMAT_BGR10A2_UINT_PACK32, "FORMAT_BGR10A2_UINT_PACK32"},
    {gli::FORMAT_BGR10A2_SINT_PACK32, "FORMAT_BGR10A2_SINT_PACK32"},
    {gli::FORMAT_R16_UNORM_PACK16, "FORMAT_R16_UNORM_PACK16"},
    {gli::FORMAT_R16_SNORM_PACK16, "FORMAT_R16_SNORM_PACK16"},
    {gli::FORMAT_R16_USCALED_PACK16, "FORMAT_R16_USCALED_PACK16"},
    {gli::FORMAT_R16_SSCALED_PACK16, "FORMAT_R16_SSCALED_PACK16"},
    {gli::FORMAT_R16_UINT_PACK16, "FORMAT_R16_UINT_PACK16"},
    {gli::FORMAT_R16_SINT_PACK16, "FORMAT_R16_SINT_PACK16"},
    {gli::FORMAT_R16_SFLOAT_PACK16, "FORMAT_R16_SFLOAT_PACK16"},
    {gli::FORMAT_RG16_UNORM_PACK16, "FORMAT_RG16_UNORM_PACK16"},
    {gli::FORMAT_RG16_SNORM_PACK16, "FORMAT_RG16_SNORM_PACK16"},
    {gli::FORMAT_RG16_USCALED_PACK16, "FORMAT_RG16_USCALED_PACK16"},
    {gli::FORMAT_RG16_SSCALED_PACK16, "FORMAT_RG16_SSCALED_PACK16"},
    {gli::FORMAT_RG16_UINT_PACK16, "FORMAT_RG16_UINT_PACK16"},
    {gli::FORMAT_RG16_SINT_PACK16, "FORMAT_RG16_SINT_PACK16"},
    {gli::FORMAT_RG16_SFLOAT_PACK16, "FORMAT_RG16_SFLOAT_PACK16"},
    {gli::FORMAT_RGB16_UNORM_PACK16, "FORMAT_RGB16_UNORM_PACK16"},
    {gli::FORMAT_RGB16_SNORM_PACK16, "FORMAT_RGB16_SNORM_PACK16"},
    {gli::FORMAT_RGB16_USCALED_PACK16, "FORMAT_RGB16_USCALED_PACK16"},
    {gli::FORMAT_RGB16_SSCALED_PACK16, "FORMAT_RGB16_SSCALED_PACK16"},
    {gli::FORMAT_RGB16_UINT_PACK16, "FORMAT_RGB16_UINT_PACK16"},
    {gli::FORMAT_RGB16_SINT_PACK16, "FORMAT_RGB16_SINT_PACK16"},
    {gli::FORMAT_RGB16_SFLOAT_PACK16, "FORMAT_RGB16_SFLOAT_PACK16"},
    {gli::FORMAT_RGBA16_UNORM_PACK16, "FORMAT_RGBA16_UNORM_PACK16"},
    {gli::FORMAT_RGBA16_SNORM_PACK16, "FORMAT_RGBA16_SNORM_PACK16"},
    {gli::FORMAT_RGBA16_USCALED_PACK16, "FORMAT_RGBA16_USCALED_PACK16"},
    {gli::FORMAT_RGBA16_SSCALED_PACK16, "FORMAT_RGBA16_SSCALED_PACK16"},
    {gli::FORMAT_RGBA16_UINT_PACK16, "FORMAT_RGBA16_UINT_PACK16"},
    {gli::FORMAT_RGBA16_SINT_PACK16, "FORMAT_RGBA16_SINT_PACK16"},
    {gli::FORMAT_RGBA16_SFLOAT_PACK16, "FORMAT_RGBA16_SFLOAT_PACK16"},
    {gli::FORMAT_R32_UINT_PACK32, "FORMAT_R32_UINT_PACK32"},
    {gli::FORMAT_R32_SINT_PACK32, "FORMAT_R32_SINT_PACK32"},
    {gli::FORMAT_R32_SFLOAT_PACK32, "FORMAT_R32_SFLOAT_PACK32"},
    {gli::FORMAT_RG32_UINT_PACK32, "FORMAT_RG32_UINT_PACK32"},
    {gli::FORMAT_RG32_SINT_PACK32, "FORMAT_RG32_SINT_PACK32"},
    {gli::FORMAT_RG32_SFLOAT_PACK32, "FORMAT_RG32_SFLOAT_PACK32"},
    {gli::FORMAT_RGB32_UINT_PACK32, "FORMAT_RGB32_UINT_PACK32"},
    {gli::FORMAT_RGB32_SINT_PACK32, "FORMAT_RGB32_SINT_PACK32"},
    {gli::FORMAT_RGB32_SFLOAT_PACK32, "FORMAT_RGB32_SFLOAT_PACK32"},
    {gli::FORMAT_RGBA32_UINT_PACK32, "FORMAT_RGBA32_UINT_PACK32"},
    {gli::FORMAT_RGBA32_SINT_PACK32, "FORMAT_RGBA32_SINT_PACK32"},
    {gli::FORMAT_RGBA32_SFLOAT_PACK32, "FORMAT_RGBA32_SFLOAT_PACK32"},
    {gli::FORMAT_R64_UINT_PACK64, "FORMAT_R64_UINT_PACK64"},
    {gli::FORMAT_R64_SINT_PACK64, "FORMAT_R64_SINT_PACK64"},
    {gli::FORMAT_R64_SFLOAT_PACK64, "FORMAT_R64_SFLOAT_PACK64"},
    {gli::FORMAT_RG64_UINT_PACK64, "FORMAT_RG64_UINT_PACK64"},
    {gli::FORMAT_RG64_SINT_PACK64, "FORMAT_RG64_SINT_PACK64"},
    {gli::FORMAT_RG64_SFLOAT_PACK64, "FORMAT_RG64_SFLOAT_PACK64"},
    {gli::FORMAT_RGB64_UINT_PACK64, "FORMAT_RGB64_UINT_PACK64"},
    {gli::FORMAT_RGB64_SINT_PACK64, "FORMAT_RGB64_SINT_PACK64"},
    {gli::FORMAT_RGB64_SFLOAT_PACK64, "FORMAT_RGB64_SFLOAT_PACK64"},
    {gli::FORMAT_RGBA64_UINT_PACK64, "FORMAT_RGBA64_UINT_PACK64"},
    {gli::FORMAT_RGBA64_SINT_PACK64, "FORMAT_RGBA64_SINT_PACK64"},
    {gli::FORMAT_RGBA64_SFLOAT_PACK64, "FORMAT_RGBA64_SFLOAT_PACK64"},
    {gli::FORMAT_RG11B10_UFLOAT_PACK32, "FORMAT_RG11B10_UFLOAT_PACK32"},
    {gli::FORMAT_RGB9E5_UFLOAT_PACK32, "FORMAT_RGB9E5_UFLOAT_PACK32"},
    {gli::FORMAT_D16_UNORM_PACK16, "FORMAT_D16_UNORM_PACK16"},
    {gli::FORMAT_D24_UNORM_PACK32, "FORMAT_D24_UNORM_PACK32"},
    {gli::FORMAT_D32_SFLOAT_PACK32, "FORMAT_D32_SFLOAT_PACK32"},
    {gli::FORMAT_S8_UINT_PACK8, "FORMAT_S8_UINT_PACK8"},
    {gli::FORMAT_D16_UNORM_S8_UINT_PACK32, "FORMAT_D16_UNORM_S8_UINT_PACK32"},
    {gli::FORMAT_D24_UNORM_S8_UINT_PACK32, "FORMAT_D24_UNORM_S8_UINT_PACK32"},
    {gli::FORMAT_D32_SFLOAT_S8_UINT_PACK64, "FORMAT_D32_SFLOAT_S8_UINT_PACK64"},
    {gli::FORMAT_RGB_DXT1_UNORM_BLOCK8, "FORMAT_RGB_DXT1_UNORM_BLOCK8"},
    {gli::FORMAT_RGB_DXT1_SRGB_BLOCK8, "FORMAT_RGB_DXT1_SRGB_BLOCK8"},
    {gli::FORMAT_RGBA_DXT1_UNORM_BLOCK8, "FORMAT_RGBA_DXT1_UNORM_BLOCK8"},
    {gli::FORMAT_RGBA_DXT1_SRGB_BLOCK8, "FORMAT_RGBA_DXT1_SRGB_BLOCK8"},
    {gli::FORMAT_RGBA_DXT3_UNORM_BLOCK16, "FORMAT_RGBA_DXT3_UNORM_BLOCK16"},
    {gli::FORMAT_RGBA_DXT3_SRGB_BLOCK16, "FORMAT_RGBA_DXT3_SRGB_BLOCK16"},
    {gli::FORMAT_RGBA_DXT5_UNORM_BLOCK16, "FORMAT_RGBA_DXT5_UNORM_BLOCK16"},
    {gli::FORMAT_RGBA_DXT5_SRGB_BLOCK16, "FORMAT_RGBA_DXT5_SRGB_BLOCK16"},
    {gli::FORMAT_R_ATI1N_UNORM_BLOCK8, "FORMAT_R_ATI1N_UNORM_BLOCK8"},
    {gli::FORMAT_R_ATI1N_SNORM_BLOCK8, "FORMAT_R_ATI1N_SNORM_BLOCK8"},
    {gli::FORMAT_RG_ATI2N_UNORM_BLOCK16, "FORMAT_RG_ATI2N_UNORM_BLOCK16"},
    {gli::FORMAT_RG_ATI2N_SNORM_BLOCK16, "FORMAT_RG_ATI2N_SNORM_BLOCK16"},
    {gli::FORMAT_RGB_BP_UFLOAT_BLOCK16, "FORMAT_RGB_BP_UFLOAT_BLOCK16"},
    {gli::FORMAT_RGB_BP_SFLOAT_BLOCK16, "FORMAT_RGB_BP_SFLOAT_BLOCK16"},
    {gli::FORMAT_RGBA_BP_UNORM_BLOCK16, "FORMAT_RGBA_BP_UNORM_BLOCK16"},
    {gli::FORMAT_RGBA_BP_SRGB_BLOCK16, "FORMAT_RGBA_BP_SRGB_BLOCK16"},
    {gli::FORMAT_RGB_ETC2_UNORM_BLOCK8, "FORMAT_RGB_ETC2_UNORM_BLOCK8"},
    {gli::FORMAT_RGB_ETC2_SRGB_BLOCK8, "FORMAT_RGB_ETC2_SRGB_BLOCK8"},
    {gli::FORMAT_RGBA_ETC2_UNORM_BLOCK8, "FORMAT_RGBA_ETC2_UNORM_BLOCK8"},
    {gli::FORMAT_RGBA_ETC2_SRGB_BLOCK8, "FORMAT_RGBA_ETC2_SRGB_BLOCK8"},
    {gli::FORMAT_RGBA_ETC2_UNORM_BLOCK16, "FORMAT_RGBA_ETC2_UNORM_BLOCK16"},
    {gli::FORMAT_RGBA_ETC2_SRGB_BLOCK16, "FORMAT_RGBA_ETC2_SRGB_BLOCK16"},
    {gli::FORMAT_R_EAC_UNORM_BLOCK8, "FORMAT_R_EAC_UNORM_BLOCK8"},
    {gli::FORMAT_R_EAC_SNORM_BLOCK8, "FORMAT_R_EAC_SNORM_BLOCK8"},
    {gli::FORMAT_RG_EAC_UNORM_BLOCK16, "FORMAT_RG_EAC_UNORM_BLOCK16"},
    {gli::FORMAT_RG_EAC_SNORM_BLOCK16, "FORMAT_RG_EAC_SNORM_BLOCK16"},
    {gli::FORMAT_RGBA_ASTC_4X4_UNORM_BLOCK16, "FORMAT_RGBA_ASTC_4X4_UNORM_BLOCK16"},
    {gli::FORMAT_RGBA_ASTC_4X4_SRGB_BLOCK16, "FORMAT_RGBA_ASTC_4X4_SRGB_BLOCK16"},
    {gli::FORMAT_RGBA_ASTC_5X4_UNORM_BLOCK16, "FORMAT_RGBA_ASTC_5X4_UNORM_BLOCK16"},
    {gli::FORMAT_RGBA_ASTC_5X4_SRGB_BLOCK16, "FORMAT_RGBA_ASTC_5X4_SRGB_BLOCK16"},
    {gli::FORMAT_RGBA_ASTC_5X5_UNORM_BLOCK16, "FORMAT_RGBA_ASTC_5X5_UNORM_BLOCK16"},
    {gli::FORMAT_RGBA_ASTC_5X5_SRGB_BLOCK16, "FORMAT_RGBA_ASTC_5X5_SRGB_BLOCK16"},
    {gli::FORMAT_RGBA_ASTC_6X5_UNORM_BLOCK16, "FORMAT_RGBA_ASTC_6X5_UNORM_BLOCK16"},
    {gli::FORMAT_RGBA_ASTC_6X5_SRGB_BLOCK16, "FORMAT_RGBA_ASTC_6X5_SRGB_BLOCK16"},
    {gli::FORMAT_RGBA_ASTC_6X6_UNORM_BLOCK16, "FORMAT_RGBA_ASTC_6X6_UNORM_BLOCK16"},
    {gli::FORMAT_RGBA_ASTC_6X6_SRGB_BLOCK16, "FORMAT_RGBA_ASTC_6X6_SRGB_BLOCK16"},
    {gli::FORMAT_RGBA_ASTC_8X5_UNORM_BLOCK16, "FORMAT_RGBA_ASTC_8X5_UNORM_BLOCK16"},
    {gli::FORMAT_RGBA_ASTC_8X5_SRGB_BLOCK16, "FORMAT_RGBA_ASTC_8X5_SRGB_BLOCK16"},
    {gli::FORMAT_RGBA_ASTC_8X6_UNORM_BLOCK16, "FORMAT_RGBA_ASTC_8X6_UNORM_BLOCK16"},
    {gli::FORMAT_RGBA_ASTC_8X6_SRGB_BLOCK16, "FORMAT_RGBA_ASTC_8X6_SRGB_BLOCK16"},
    {gli::FORMAT_RGBA_ASTC_8X8_UNORM_BLOCK16, "FORMAT_RGBA_ASTC_8X8_UNORM_BLOCK16"},
    {gli::FORMAT_RGBA_ASTC_8X8_SRGB_BLOCK16, "FORMAT_RGBA_ASTC_8X8_SRGB_BLOCK16"},
    {gli::FORMAT_RGBA_ASTC_10X5_UNORM_BLOCK16, "FORMAT_RGBA_ASTC_10X5_UNORM_BLOCK16"},
    {gli::FORMAT_RGBA_ASTC_10X5_SRGB_BLOCK16, "FORMAT_RGBA_ASTC_10X5_SRGB_BLOCK16"},
    {gli::FORMAT_RGBA_ASTC_10X6_UNORM_BLOCK16, "FORMAT_RGBA_ASTC_10X6_UNORM_BLOCK16"},
    {gli::FORMAT_RGBA_ASTC_10X6_SRGB_BLOCK16, "FORMAT_RGBA_ASTC_10X6_SRGB_BLOCK16"},
    {gli::FORMAT_RGBA_ASTC_10X8_UNORM_BLOCK16, "FORMAT_RGBA_ASTC_10X8_UNORM_BLOCK16"},
    {gli::FORMAT_RGBA_ASTC_10X8_SRGB_BLOCK16, "FORMAT_RGBA_ASTC_10X8_SRGB_BLOCK16"},
    {gli::FORMAT_RGBA_ASTC_10X10_UNORM_BLOCK16, "FORMAT_RGBA_ASTC_10X10_UNORM_BLOCK16"},
    {gli::FORMAT_RGBA_ASTC_10X10_SRGB_BLOCK16, "FORMAT_RGBA_ASTC_10X10_SRGB_BLOCK16"},
    {gli::FORMAT_RGBA_ASTC_12X10_UNORM_BLOCK16, "FORMAT_RGBA_ASTC_12X10_UNORM_BLOCK16"},
    {gli::FORMAT_RGBA_ASTC_12X10_SRGB_BLOCK16, "FORMAT_RGBA_ASTC_12X10_SRGB_BLOCK16"},
    {gli::FORMAT_RGBA_ASTC_12X12_UNORM_BLOCK16, "FORMAT_RGBA_ASTC_12X12_UNORM_BLOCK16"},
    {gli::FORMAT_RGBA_ASTC_12X12_SRGB_BLOCK16, "FORMAT_RGBA_ASTC_12X12_SRGB_BLOCK16"},
    {gli::FORMAT_RGB_PVRTC1_8X8_UNORM_BLOCK32, "FORMAT_RGB_PVRTC1_8X8_UNORM_BLOCK32"},
    {gli::FORMAT_RGB_PVRTC1_8X8_SRGB_BLOCK32, "FORMAT_RGB_PVRTC1_8X8_SRGB_BLOCK32"},
    {gli::FORMAT_RGB_PVRTC1_16X8_UNORM_BLOCK32, "FORMAT_RGB_PVRTC1_16X8_UNORM_BLOCK32"},
    {gli::FORMAT_RGB_PVRTC1_16X8_SRGB_BLOCK32, "FORMAT_RGB_PVRTC1_16X8_SRGB_BLOCK32"},
    {gli::FORMAT_RGBA_PVRTC1_8X8_UNORM_BLOCK32, "FORMAT_RGBA_PVRTC1_8X8_UNORM_BLOCK32"},
    {gli::FORMAT_RGBA_PVRTC1_8X8_SRGB_BLOCK32, "FORMAT_RGBA_PVRTC1_8X8_SRGB_BLOCK32"},
    {gli::FORMAT_RGBA_PVRTC1_16X8_UNORM_BLOCK32, "FORMAT_RGBA_PVRTC1_16X8_UNORM_BLOCK32"},
    {gli::FORMAT_RGBA_PVRTC1_16X8_SRGB_BLOCK32, "FORMAT_RGBA_PVRTC1_16X8_SRGB_BLOCK32"},
    {gli::FORMAT_RGBA_PVRTC2_4X4_UNORM_BLOCK8, "FORMAT_RGBA_PVRTC2_4X4_UNORM_BLOCK8"},
    {gli::FORMAT_RGBA_PVRTC2_4X4_SRGB_BLOCK8, "FORMAT_RGBA_PVRTC2_4X4_SRGB_BLOCK8"},
    {gli::FORMAT_RGBA_PVRTC2_8X4_UNORM_BLOCK8, "FORMAT_RGBA_PVRTC2_8X4_UNORM_BLOCK8"},
    {gli::FORMAT_RGBA_PVRTC2_8X4_SRGB_BLOCK8, "FORMAT_RGBA_PVRTC2_8X4_SRGB_BLOCK8"},
    {gli::FORMAT_RGB_ETC_UNORM_BLOCK8, "FORMAT_RGB_ETC_UNORM_BLOCK8"},
    {gli::FORMAT_RGB_ATC_UNORM_BLOCK8, "FORMAT_RGB_ATC_UNORM_BLOCK8"},
    {gli::FORMAT_RGBA_ATCA_UNORM_BLOCK16, "FORMAT_RGBA_ATCA_UNORM_BLOCK16"},
    {gli::FORMAT_RGBA_ATCI_UNORM_BLOCK16, "FORMAT_RGBA_ATCI_UNORM_BLOCK16"},
    {gli::FORMAT_L8_UNORM_PACK8, "FORMAT_L8_UNORM_PACK8"},
    {gli::FORMAT_A8_UNORM_PACK8, "FORMAT_A8_UNORM_PACK8"},
    {gli::FORMAT_LA8_UNORM_PACK8, "FORMAT_LA8_UNORM_PACK8"},
    {gli::FORMAT_L16_UNORM_PACK16, "FORMAT_L16_UNORM_PACK16"},
    {gli::FORMAT_A16_UNORM_PACK16, "FORMAT_A16_UNORM_PACK16"},
    {gli::FORMAT_LA16_UNORM_PACK16, "FORMAT_LA16_UNORM_PACK16"},
    {gli::FORMAT_BGR8_UNORM_PACK32, "FORMAT_BGR8_UNORM_PACK32"},
    {gli::FORMAT_BGR8_SRGB_PACK32, "FORMAT_BGR8_SRGB_PACK32"},
    {gli::FORMAT_RG3B2_UNORM_PACK8, "FORMAT_RG3B2_UNORM_PACK8"},
};

int main(int argc, char **argv) {
    if (argc != 2) {
        return 1;
    }
    std::string srcPath = argv[1];

    gli::texture2d srcTex{gli::load(srcPath)};

    gli::format fmt = srcTex.format();
    for (auto &[fmt, txt] : known_formats) {
        // fprintf(stderr, "%d: %s\n", fmt, txt);
    }
    // if (fmt != gli::FORMAT_RGBA_BP_UNORM_BLOCK16 && fmt != gli::FORMAT_RGBA_BP_SRGB_BLOCK16) {
    {
        if (auto I = known_formats.find(fmt); I != known_formats.end()) {
            fprintf(stderr, "unhandled known format %s (%d): %s\n", I->second, fmt, srcPath.c_str());
        } else {
            fprintf(stderr, "unhandled unknown format %d: %s\n", fmt, srcPath.c_str());
        }
        return 1;
    }

    auto extent = srcTex.extent();

    auto srcData = srcTex.data(0, 0, 0);
    auto srcSize = srcTex.size(0);
    std::vector<uint8_t> dstData(4 * extent.x * extent.y);
    // bool success =
    //     lv_bptc_decode(LV_BPTC_FORMAT_BC7_UNORM, extent.x, extent.y, srcData, srcSize, dstData.data(),
    //     dstData.size());

    struct BlockCoord {
        int x, y;

        auto operator<=>(BlockCoord const &) const = default;
    };

    int blockW = (extent.x + 3) / 4;
    int blockH = (extent.y + 3) / 4;

    for (int blockY = 0; blockY < blockH; ++blockY) {
        for (int blockX = 0; blockX < blockW; ++blockX) {
            uint8_t const *blockData = (uint8_t const *)srcData + 16 * (blockX + blockY * blockW);
            std::array<uint8_t, 4 * 4 * 4> my_pixels{}, their_pixels{};
            lv_bptc_decode_block_bc7(blockData, my_pixels.data());
            DecompressBlockBC7(blockData, their_pixels.data());
            if (my_pixels != their_pixels) {
                fprintf(stderr, "Decode mismatch in block (%d, %d) of file %s\n", blockX, blockY, srcPath.c_str());
                return 1;
            }
        }
    }

    auto print_block_header = [](FILE *fh, uint8_t mode) {
        struct BC7Mode {
            int mode;
            int subsets;
            int partition_bits;
            int rotation_bits;
            int index_selection_bits;
            int color_bits;
            int alpha_bits;
            int endpoint_p_bits;
            int shared_p_bits;
            int index_bits_per_element;
            int secondary_index_bits_per_element;
        } bc7_modes[] = {
            // Mode NS PB RB ISB CB AB EPB SPB IB IB2
            // ---- -- -- -- --- -- -- --- --- -- ---
            {0, 3, 4, 0, 0, 4, 0, 1, 0, 3, 0}, {1, 2, 6, 0, 0, 6, 0, 0, 1, 3, 0}, {2, 3, 6, 0, 0, 5, 0, 0, 0, 2, 0},
            {3, 2, 6, 0, 0, 7, 0, 1, 0, 2, 0}, {4, 1, 0, 2, 1, 5, 6, 0, 0, 2, 3}, {5, 1, 0, 2, 0, 7, 8, 0, 0, 2, 2},
            {6, 1, 0, 0, 0, 7, 7, 1, 0, 4, 0}, {7, 2, 6, 0, 0, 5, 5, 1, 0, 2, 0},
        };
        char buf[16 * 8 + 7 + 1 + 1024]{};
        auto &params = bc7_modes[mode];
        char *p = buf;
        int written = 0;

        auto emit = [&](char ch) {
            if (written && (written % 8) == 0) {
                *p++ = ' ';
            }
            *p++ = ch;
            ++written;
        };

        auto emit_n = [&](char ch, size_t n) {
            for (size_t i = 0; i < n; ++i) {
                emit(ch);
            }
        };

        emit_n('M', mode + 1);
        emit_n('P', params.partition_bits);
        emit_n('R', params.rotation_bits);
        emit_n('I', params.index_selection_bits);
        emit_n('r', params.subsets * 2 * params.color_bits);
        emit_n('g', params.subsets * 2 * params.color_bits);
        emit_n('b', params.subsets * 2 * params.color_bits);
        emit_n('a', params.subsets * 2 * params.alpha_bits);
        emit_n('e', params.subsets * 2 * params.endpoint_p_bits);
        emit_n('s', params.subsets * params.shared_p_bits);
        if (params.index_bits_per_element) {
            emit_n('1', 16 * params.index_bits_per_element - params.subsets);
        }
        if (params.secondary_index_bits_per_element) {
            emit_n('2', 16 * params.secondary_index_bits_per_element - params.subsets);
        }

        // flush out
        fprintf(fh, "%s\n", buf);
    };

    auto print_block_bits = [](FILE *fh, uint8_t const *p) {
        char const *sep = "";
        for (size_t i = 0; i < 16; ++i) {
            fprintf(fh, "%s", sep);
            sep = " ";
            for (size_t j = 0; j < 8; ++j) {
                fprintf(fh, "%d", (p[i] >> j) & 1);
            }
        }
        fprintf(fh, "\n");
    };
    auto print_result = [](FILE *fh, auto pixels) {
        uint8_t const *p = pixels;
        for (int y = 0; y < 4; ++y) {
            for (int x = 0; x < 4; ++x) {
                fprintf(fh, "%02X%02X%02X%02X ", p[3], p[0], p[1], p[2]);
                p += 4;
            }
            fprintf(fh, "\n");
        }
    };
}